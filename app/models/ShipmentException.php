<?php

/**
 * ShipmentException
 * 
 * @autogenerated by Phalcon Developer Tools
 * @date 2016-06-29, 15:36:34
 */
class ShipmentException extends \Phalcon\Mvc\Model
{

    const ACTION_DESCRIPTION_NOT_RECEIVED = "Parcel Not Received";
    const ACTION_DESCRIPTION_NOT_SENT = "Parcel Not Sent";
    const ACTION_DESCRIPTION_NOT_SORTED = "Parcel Not Sorted";

    /**
     *
     * @var integer
     */
    protected $id;

    /**
     *
     * @var integer
     */
    protected $defaulter_branch_id;

    /**
     *
     * @var integer
     */
    protected $detector_branch_id;

    /**
     *
     * @var string
     */
    protected $parcel_id;

    /**
     *
     * @var string
     */
    protected $creation_date;

    /**
     *
     * @var string
     */
    protected $modification_date;

    /**
     *
     * @var integer
     */
    protected $admin_id;

    /**
     *
     * @var integer
     */
    protected $held_by_id;

    /**
     *
     * @var string
     */
    protected $action_description;

    /**
     * Method to set the value of field id
     *
     * @param integer $id
     * @return $this
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Method to set the value of field defaulter_branch_id
     *
     * @param integer $defaulter_branch_id
     * @return $this
     */
    public function setDefaulterBranchId($defaulter_branch_id)
    {
        $this->defaulter_branch_id = $defaulter_branch_id;

        return $this;
    }

    /**
     * Method to set the value of field detector_branch_id
     *
     * @param integer $detector_branch_id
     * @return $this
     */
    public function setDetectorBranchId($detector_branch_id)
    {
        $this->detector_branch_id = $detector_branch_id;

        return $this;
    }

    /**
     * Method to set the value of field parcel_id
     *
     * @param string $parcel_id
     * @return $this
     */
    public function setParcelId($parcel_id)
    {
        $this->parcel_id = $parcel_id;

        return $this;
    }

    /**
     * Method to set the value of field creation_date
     *
     * @param string $creation_date
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->creation_date = $creation_date;

        return $this;
    }

    /**
     * Method to set the value of field modification_date
     *
     * @param string $modification_date
     * @return $this
     */
    public function setModificationDate($modification_date)
    {
        $this->modification_date = $modification_date;

        return $this;
    }

    /**
     * Method to set the value of field admin_id
     *
     * @param integer $admin_id
     * @return $this
     */
    public function setAdminId($admin_id)
    {
        $this->admin_id = $admin_id;

        return $this;
    }

    /**
     * Method to set the value of field held_by_id
     *
     * @param integer $held_by_id
     * @return $this
     */
    public function setHeldById($held_by_id)
    {
        $this->held_by_id = $held_by_id;

        return $this;
    }

    /**
     * Method to set the value of field action_description
     *
     * @param string $action_description
     * @return $this
     */
    public function setActionDescription($action_description)
    {
        $this->action_description = $action_description;

        return $this;
    }

    /**
     * Returns the value of field id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Returns the value of field defaulter_branch_id
     *
     * @return integer
     */
    public function getDefaulterBranchId()
    {
        return $this->defaulter_branch_id;
    }

    /**
     * Returns the value of field detector_branch_id
     *
     * @return integer
     */
    public function getDetectorBranchId()
    {
        return $this->detector_branch_id;
    }

    /**
     * Returns the value of field parcel_id
     *
     * @return string
     */
    public function getParcelId()
    {
        return $this->parcel_id;
    }

    /**
     * Returns the value of field creation_date
     *
     * @return string
     */
    public function getCreationDate()
    {
        return $this->creation_date;
    }

    /**
     * Returns the value of field modification_date
     *
     * @return string
     */
    public function getModificationDate()
    {
        return $this->modification_date;
    }

    /**
     * Returns the value of field admin_id
     *
     * @return integer
     */
    public function getAdminId()
    {
        return $this->admin_id;
    }

    /**
     * Returns the value of field held_by_id
     *
     * @return integer
     */
    public function getHeldById()
    {
        return $this->held_by_id;
    }

    /**
     * Returns the value of field action_description
     *
     * @return string
     */
    public function getActionDescription()
    {
        return $this->action_description;
    }

    public function getData()
    {
        return array(
            'id' => $this->getId(),
            'defaulter_branch_id' => $this->getDefaulterBranchId(),
            'detector_branch_id' => $this->getDetectorBranchId(),
            'action_description' => $this->getActionDescription(),
            'held_by_id' => $this->getHeldById(),
            'admin_id' => $this->getAdminId(),
            'creation_date' => $this->getCreationDate(),
            'modification_date' => $this->getModificationDate(),
            'parcel_id' => $this->getParcelId()
        );
    }

    public function initData($data)
    {
        $this->setDefaulterBranchId($data['defaulter_branch_id']);
        $this->setDetectorBranchId($data['detector_branch_id']);
        $this->setActionDescription($data['action_description']);
        $this->setHeldById($data['held_by_id']);
        $this->setAdminId($data['admin_id']);
        $this->setCreationDate($data['creation_date']);
        $this->setModificationDate($data['modification_date']);
        $this->setParcelId($data['parcel_id']);
    }

    public function columnMap()
    {
        return array(
            'id' => 'id',
            'defaulter_branch_id' => 'defaulter_branch_id',
            'detector_branch_id' => 'detector_branch_id',
            'action_description' => 'action_description',
            'held_by_id' => 'held_by_id',
            'admin_id' => 'admin_id',
            'creation_date' => 'creation_date',
            'modification_date' => 'modification_date',
            'parcel_id' => 'parcel_id'
        );
    }


    /**
     * Initialize method for model.
     */
    public function initialize()
    {
        $this->belongsTo('defaulter_branch_id', 'Branch', 'id', array('alias' => 'DefaulterBranch'));
        $this->belongsTo('detector_branch_id', 'Branch', 'id', array('alias' => 'DetectorBranch'));
        $this->belongsTo('parcel_id', 'Parcel', 'id', array('alias' => 'Parcel'));
        $this->belongsTo('admin_id', 'Admin', 'id', array('alias' => 'Admin'));
        $this->belongsTo('held_by_id', 'Holder', 'id', array('alias' => 'Holder'));
    }

    /**
     * Returns table name mapped in the model.
     *
     * @return string
     */
    public function getSource()
    {
        return 'shipment_exception';
    }

    /**
     * Allows to query a set of records that match the specified conditions
     *
     * @param mixed $parameters
     * @return ShipmentException[]
     */
    public static function find($parameters = null)
    {
        return parent::find($parameters);
    }

    /**
     * Allows to query the first record that match the specified conditions
     *
     * @param mixed $parameters
     * @return ShipmentException
     */
    public static function findFirst($parameters = null)
    {
        return parent::findFirst($parameters);
    }

    /**
     * @author Ademu Anthony <mail@ademuanthony.com>
     * @param $offset
     * @param $count
     * @param $filter_by
     * @param bool|false $paginate
     * @return array
     */

    public static function fetchAll($offset, $count, $filter_by, $fetch_with, $paginate = true)
    {

        $obj = new City();


        $builder = $obj->getModelsManager()
            ->createBuilder()
            ->from('ShipmentException')
            ->orderBy('id DESC');


        if ($paginate) {
            $builder = $builder->limit($count, $offset);
        }

        $where = [];
        $bind = [];
        $columns = ['ShipmentException.id as id', 'ShipmentException.creation_date',
            'ShipmentException.action_description'];


        if (isset($filter_by['defaulter_branch_id'])) {
            $where[] = 'ShipmentException.defaulter_branch_id = :defaulter_branch_id:';
            $bind['defaulter_branch_id'] = $filter_by['defaulter_branch_id'];
        }
        if (isset($filter_by['detector_branch_id'])) {
            $where[] = 'ShipmentException.detector_branch_id = :detector_branch_id:';
            $bind['detector_branch_id'] = $filter_by['detector_branch_id'];
        }
        if (isset($filter_by['admin_id'])) {
            $where[] = 'ShipmentException.admin_id = :admin_id:';
            $bind['admin_id'] = $filter_by['admin_id'];
        }
        if (isset($filter_by['held_by_id'])) {
            $where[] = 'ShipmentException.held_by_id = :held_by_id:';
            $bind['held_by_id'] = $filter_by['held_by_id'];
        }
        if (isset($filter_by['start_date'])) {
            $where[] = 'ShipmentException.creation_date >= :start_date:';
            $bind['start_date'] = $filter_by['start_date'];
        }

        if (isset($filter_by['end_date'])) {
            $end_date = new DateTime($filter_by['end_date']);
            $end_date = $end_date->add(new DateInterval('P1D'));
            $where[] = 'ShipmentException.creation_date < :end_date:';
            $bind['end_date'] = $end_date->format('y/m/d');
        }




        //model hydration
        if (isset($fetch_with['defaulter_branch'])) {
            $columns[] = 'DefaulterBranch.id as defaulter_branch_id';
            $columns[] = 'DefaulterBranch.name as defaulter_branch_name';
            $builder->join('DefaulterBranch', 'DefaulterBranch.id = ShipmentException.defaulter_branch_id',
                'DefaulterBranch');
        }
        if (isset($fetch_with['parcel'])) {
            $columns[] = 'Parcel.waybill_number as waybill_number';
            $builder->join('Parcel', 'Parcel.id = ShipmentException.parcel_id',
                'Parcel');
        }
        if (isset($fetch_with['detector_branch'])) {
            $columns[] = 'DetectorBranch.id as detector_branch_id';
            $columns[] = 'DetectorBranch.name as detector_branch_name';
            $builder->join('DetectorBranch', 'DetectorBranch.id = ShipmentException.detector_branch_id',
                'DetectorBranch');
        }
        if (isset($fetch_with['held_by'])) {
            $columns[] = 'Holder.fullname as held_by_name';
            $columns[] = 'Holder.id as held_by_id';
            $builder->join('Holder', 'Holder.id = ShipmentException.held_by_id',
                'Holder');
        }
        if (isset($fetch_with['admin'])) {
            $columns[] = 'Admin.fullname as admin_name';
            $columns[] = 'Admin.id as admin_id';
            $builder->join('Admin', 'Admin.id = ShipmentException.admin_id',
                'Admin');
        }


        $builder->columns($columns);
        $builder->where(join(' AND ', $where));
        $data = $builder->getQuery()->execute($bind);

        return $data;
    }

    public static function createOne($data){
        $shipmentException = new shipmentexception();
        $shipmentException->initData($data);
        if($shipmentException->save()){
            return $shipmentException;
        }
        return false;
    }

}
