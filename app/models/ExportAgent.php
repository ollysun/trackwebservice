<?php

use Phalcon\Mvc\Model\Validator\Email as Email;

/**
 * ExportAgent
 * 
 * @autogenerated by Phalcon Developer Tools
 * @date 2017-01-13, 16:48:06
 */
class ExportAgent extends \Phalcon\Mvc\Model
{

    /**
     *
     * @var integer
     */
    protected $id;

    /**
     *
     * @var string
     */
    protected $name;

    /**
     *
     * @var string
     */
    protected $website;

    /**
     *
     * @var string
     */
    protected $phone_number;

    /**
     *
     * @var string
     */
    protected $email;

    /**
     *
     * @var string
     */
    protected $agentapi;

    /**
     *
     * @var string
     */
    protected $hasapi;

    /**
     * Method to set the value of field id
     *
     * @param integer $id
     * @return $this
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Method to set the value of field name
     *
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Method to set the value of field website
     *
     * @param string $website
     * @return $this
     */
    public function setWebsite($website)
    {
        $this->website = $website;

        return $this;
    }

    /**
     * Method to set the value of field phone_number
     *
     * @param string $phone_number
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->phone_number = $phone_number;

        return $this;
    }

    /**
     * Method to set the value of field email
     *
     * @param string $email
     * @return $this
     */
    public function setEmail($email)
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Method to set the value of field email
     *
     * @param string $email
     * @return $this
     */
    public function setAgentApi($agentapi)
    {
        $this->agentapi = $agentapi;

        return $this;
    }

    /**
     * Method to set the value of field email
     *
     * @param string $email
     * @return $this
     */
    public function setHasApi($hasapi)
    {
        $this->hasapi = $hasapi;

        return $this;
    }

    /**
     * Returns the value of field id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Returns the value of field name
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Returns the value of field website
     *
     * @return string
     */
    public function getWebsite()
    {
        return $this->website;
    }

    /**
     * Returns the value of field phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->phone_number;
    }

    /**
     * Returns the value of field email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Returns the value of field email
     *
     * @return string
     */
    public function getAgentApi()
    {
        return $this->agentapi;
    }

    /**
     * Returns the value of field email
     *
     * @return string
     */
    public function getHasApi()
    {
        return $this->hasapi;
    }

    /**
     * Validations and business logic
     *
     * @return boolean
     */
    public function validation()
    {
        $this->validate(
            new Email(
                array(
                    'field'    => 'email',
                    'required' => true,
                )
            )
        );

        if ($this->validationHasFailed() == true) {
            return false;
        }

        return true;
    }

    /**
     * Initialize method for model.
     */
    public function initialize()
    {
        $this->hasMany('id', 'ExportedParcel', 'export_agent_id', array('alias' => 'ExportedParcel'));
    }

    /**
     * Returns table name mapped in the model.
     *
     * @return string
     */
    public function getSource()
    {
        return 'export_agent';
    }

    /**
     * Allows to query a set of records that match the specified conditions
     *
     * @param mixed $parameters
     * @return ExportAgent[]
     */
    public static function find($parameters = null)
    {
        return parent::find($parameters);
    }

    /**
     * Allows to query the first record that match the specified conditions
     *
     * @param mixed $parameters
     * @return ExportAgent
     */
    public static function findFirst($parameters = null)
    {
        return parent::findFirst($parameters);
    }

    /**
     * Independent Column Mapping.
     * Keys are the real names in the table and the values their names in the application
     *
     * @return array
     */
    public function columnMap()
    {
        return array(
            'id' => 'id',
            'name' => 'name',
            'website' => 'website',
            'phone_number' => 'phone_number',
            'email' => 'email',
            'agentapi' => 'agentapi',
            'hasapi' => 'hasapi'
        );
    }

    /**
     * @param $offset
     * @param $count
     * @param $filter_by
     * @param $fetch_with
     * @param bool|false $paginate bhh
     * @return array
     */
    public static function fetchAll($offset, $count, $filter_by, $fetch_with, $paginate = false){
        $builder = new \Phalcon\Mvc\Model\Query\Builder();
        $builder->addFrom('ExportAgent');
        $columns = ['ExportAgent.*'];
        $bind = [];
        if ($paginate) {
            $builder = $builder->limit($count, $offset);
        }

        $builder->columns($columns);


        if(isset($filter_by['export_agent_id'])){
            $builder->where("ExportParcel.export_agent_id = :export_agent_id:");
            $bind['export_agent_id'] = $filter_by['export_agent_id'];
        }

        if(isset($fetch_with['with_exported_parcel'])){
            $builder->innerJoin('ExportedParcel', 'ExportedParcel.id = ExportedAgent.id', 'ExportedParcel');
            $builder->innerJoin('Parcel', 'ExportedParcel.parcel_id = Parcel.id', 'Parcel');
        }



//        if(isset($fetch_with['with_staff'])){
//            $builder->innerJoin('Admin', 'Admin.staff_id = BmCentre.staff_id', 'Admin');
//        }

        $data = $builder->getQuery()->execute($bind);


        $zones = [];
        foreach ($data as $item) {
            $zones[] = $item->toArray();
        }
        return $zones;
    }
}
