<?php

/**
 * ExportedParcel
 * 
 * @autogenerated by Phalcon Developer Tools
 * @date 2017-01-13, 16:48:38
 */
class ExportedParcel extends \Phalcon\Mvc\Model
{

    /**
     *
     * @var integer
     */
    protected $id;

    /**
     *
     * @var string
     */
    protected $parcel_id;

    /**
     *
     * @var integer
     */
    protected $export_agent_id;

    /**
     *
     * @var string
     */
    protected $agent_tracking_number;

    /**
     * Method to set the value of field id
     *
     * @param integer $id
     * @return $this
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Method to set the value of field parcel_id
     *
     * @param string $parcel_id
     * @return $this
     */
    public function setParcelId($parcel_id)
    {
        $this->parcel_id = $parcel_id;

        return $this;
    }

    /**
     * Method to set the value of field export_agent_id
     *
     * @param integer $export_agent_id
     * @return $this
     */
    public function setExportAgentId($export_agent_id)
    {
        $this->export_agent_id = $export_agent_id;

        return $this;
    }

    /**
     * Method to set the value of field agent_tracking_number
     *
     * @param string $agent_tracking_number
     * @return $this
     */
    public function setAgentTrackingNumber($agent_tracking_number)
    {
        $this->agent_tracking_number = $agent_tracking_number;

        return $this;
    }

    /**
     * Returns the value of field id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Returns the value of field parcel_id
     *
     * @return string
     */
    public function getParcelId()
    {
        return $this->parcel_id;
    }

    /**
     * Returns the value of field export_agent_id
     *
     * @return integer
     */
    public function getExportAgentId()
    {
        return $this->export_agent_id;
    }

    /**
     * Returns the value of field agent_tracking_number
     *
     * @return string
     */
    public function getAgentTrackingNumber()
    {
        return $this->agent_tracking_number;
    }

    /**
     * Initialize method for model.
     */
    public function initialize()
    {
        $this->belongsTo('export_agent_id', 'ExportAgent', 'id', array('alias' => 'ExportAgent'));
        $this->belongsTo('parcel_id', 'Parcel', 'id', array('alias' => 'Parcel'));
    }

    /**
     * Returns table name mapped in the model.
     *
     * @return string
     */
    public function getSource()
    {
        return 'exported_parcel';
    }

    /**
     * Allows to query a set of records that match the specified conditions
     *
     * @param mixed $parameters
     * @return ExportedParcel[]
     */
    public static function find($parameters = null)
    {
        return parent::find($parameters);
    }

    /**
     * Allows to query the first record that match the specified conditions
     *
     * @param mixed $parameters
     * @return ExportedParcel
     */
    public static function findFirst($parameters = null)
    {
        return parent::findFirst($parameters);
    }

    /**
     * Independent Column Mapping.
     * Keys are the real names in the table and the values their names in the application
     *
     * @return array
     */
    public function columnMap()
    {
        return array(
            'id' => 'id',
            'parcel_id' => 'parcel_id',
            'export_agent_id' => 'export_agent_id',
            'agent_tracking_number' => 'agent_tracking_number'
        );
    }

    public static function fetchAll($offset, $count, $filter_by, $fetch_with, $paginate){
        $builder = new \Phalcon\Mvc\Model\Query\Builder();
        $builder->addFrom('ExportedParcel', 'ExportedParcel')
                ->innerJoin('Parcel', 'Parcel.id = ExportedParcel.parcel_id')
                ->innerJoin('ExportAgent', 'ExportAgent.id = ExportedParcel.export_agent_id')
        ;

        $builder->columns(['ExportedParcel.*', 'Parcel.*', 'ExportAgent.*']);

        $bind = [];
        if ($paginate) {
            $builder = $builder->limit($count, $offset);
        }

        if(isset($filter_by['agent_id'])){
            $builder->where('ExportedParcel.export_agent_id = :agent_id:');
            $bind['agent_id'] = $filter_by['agent_id'];
        }
        if(isset($filter_by['start_created_date'])){
            if(isset($filter_by['end_created_date'])){
                $builder->where('Parcel.created_date >= :start_created_date: AND Parcel.created_date <= :end_created_date:');
                $bind['start_created_date'] = $filter_by['start_created_date'];
                $bind['end_created_date'] = $filter_by['end_created_date'];
            }else{
                $builder->where('Parcel.created_date = :start_created_date:');
                $bind['start_created_date'] = $filter_by['start_created_date'];
            }
        }
        if(isset($filter_by['waybill_number'])){
            $builder->where('Parcel.waybill_number = :waybill_number:');
            $bind['waybill_number'] = $filter_by['waybill_number'];
        }

        $result = $builder->getQuery()->execute($bind);

        $parcels = [];
        foreach ($result as $item) {
            $exportedParcel = $item->exportedParcel->toArray();
            $exportedParcel['parcel'] = $item->parcel->toArray();
            $exportedParcel['agent'] = $item->exportAgent->toArray();
            $parcels[] = $exportedParcel;
        }
        return $parcels;
    }


    /**
     * Returns the number of exported parcels based on condition
     *
     * @param array
     * @return int
     * @author  Olawale Lawal
     */
    public static function countExportedParcels($filter_by)
    {
        $obj = new Teller();
        $builder = $obj->getModelsManager()->createBuilder()
            ->columns('COUNT(*) AS parcel_count')
            ->from('ExportedParcel');

        $bind = [];

        if(isset($filter_by['agent_id'])){
            $builder->where('ExportedParcel.export_agent_id = :agent_id:');
            $bind['agent_id'] = $filter_by['agent_id'];
        }
        if(isset($filter_by['start_created_date'])){
            if(isset($filter_by['end_created_date'])){
                $builder->where('Parcel.created_date >= :start_created_date: AND Parcel.created_date <= :end_created_date:');
                $bind['start_created_date'] = $filter_by['start_created_date'];
                $bind['end_created_date'] = $filter_by['end_created_date'];
            }else{
                $builder->where('Parcel.created_date = :start_created_date:');
                $bind['start_created_date'] = $filter_by['start_created_date'];
            }
        }
        if(isset($filter_by['waybill_number'])){
            $builder->where('Parcel.waybill_number = :waybill_number:');
            $bind['waybill_number'] = $filter_by['waybill_number'];
        }

        $data = $builder->getQuery()->execute($bind);

        if (count($data) == 0) {
            return null;
        }

        return intval($data[0]->parcel_count);
    }



    public static function fetchAllUnlinkedParcels($offset, $count, $filter_by, $paginate){
        $builder = new \Phalcon\Mvc\Model\Query\Builder();
        $builder->addFrom('Parcel', 'Parcel')
            ->innerJoin('Address', 'Parcel.receiver_address_id = Address.id', 'Address')
            ->innerJoin('Country', 'Address.country_id = Country.id', 'Country')
            ->leftJoin('ExportParcel', 'Parcel.id = ExportedParcel.parcel_id')
        ;


        $builder->columns(['ExportedParcel.*', 'Parcel.*', 'ExportAgent.*']);

        $bind = [];
        $builder->where('ExportedParcel.id IS NULL AND Country.id != :default_country_id:');
        $bind['default_country_id'] = Country::DEFAULT_COUNTRY_ID;

        if ($paginate) {
            $builder = $builder->limit($count, $offset);
        }

        if(isset($filter_by['start_created_date'])){
            if(isset($filter_by['end_created_date'])){
                $builder->where('Parcel.created_date >= :start_created_date: AND Parcel.created_date <= :end_created_date:');
                $bind['start_created_date'] = $filter_by['start_created_date'];
                $bind['end_created_date'] = $filter_by['end_created_date'];
            }else{
                $builder->where('Parcel.created_date = :start_created_date:');
                $bind['start_created_date'] = $filter_by['start_created_date'];
            }
        }
        if(isset($filter_by['waybill_number'])){
            $builder->where('Parcel.waybill_number = :waybill_number:');
            $bind['waybill_number'] = $filter_by['waybill_number'];
        }

        $result = $builder->getQuery()->execute($bind);

        $parcels = [];
        foreach ($result as $item) {
            $exportedParcel = $item->exportedParcel->toArray();
            $exportedParcel['parcel'] = $item->parcel->toArray();
            $exportedParcel['agent'] = $item->exportAgent->toArray();
            $parcels[] = $exportedParcel;
        }
        return $parcels;
    }


    /**
     * Returns the number of exported parcels based on condition
     *
     * @param array
     * @return int
     * @author  Olawale Lawal
     */
    public static function countAllUnlinkedParcels($filter_by)
    {
        $obj = new Teller();
        $builder = $obj->getModelsManager()->createBuilder()
            ->columns('COUNT(*) AS parcel_count')
            ->from('Parcel');

        $bind = [];

        if(isset($filter_by['start_created_date'])){
            if(isset($filter_by['end_created_date'])){
                $builder->where('Parcel.created_date >= :start_created_date: AND Parcel.created_date <= :end_created_date:');
                $bind['start_created_date'] = $filter_by['start_created_date'];
                $bind['end_created_date'] = $filter_by['end_created_date'];
            }else{
                $builder->where('Parcel.created_date = :start_created_date:');
                $bind['start_created_date'] = $filter_by['start_created_date'];
            }
        }
        if(isset($filter_by['waybill_number'])){
            $builder->where('Parcel.waybill_number = :waybill_number:');
            $bind['waybill_number'] = $filter_by['waybill_number'];
        }

        $data = $builder->getQuery()->execute($bind);

        if (count($data) == 0) {
            return null;
        }

        return intval($data[0]->parcel_count);
    }
}
