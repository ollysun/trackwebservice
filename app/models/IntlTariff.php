<?php

/**
 * IntlTariff
 * 
 * @autogenerated by Phalcon Developer Tools
 * @date 2016-12-27, 16:53:52
 */
class IntlTariff extends \Phalcon\Mvc\Model
{

    /**
     *
     * @var integer
     */
    protected $id;

    /**
     *
     * @var integer
     */
    protected $weight_range_id;

    /**
     *
     * @var integer
     */
    protected $zone_id;

    /**
     * @var integer
     */
    protected $parcel_type_id;

    /**
     *
     * @var double
     */
    protected $base_amount;

    /**
     *
     * @var double
     */
    protected $increment;

    /**
     * Method to set the value of field id
     *
     * @param integer $id
     * @return $this
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Method to set the value of field intl_weight_range_id
     *
     * @param integer $weight_range_id
     * @return $this
     */
    public function setWeightRangeId($weight_range_id)
    {
        $this->weight_range_id = $weight_range_id;

        return $this;
    }

    /**
     * Method to set the value of field intl_zone_id
     *
     * @param integer $zone_id
     * @return $this
     */
    public function setZoneId($zone_id)
    {
        $this->zone_id = $zone_id;

        return $this;
    }

    /**
     * Method to set the value of field parcel_type_id
     *
     * @param integer $zone_id
     * @return $this
     */
    public function setParcelTypeId($parcel_type_id)
    {
        $this->parcel_type_id = $parcel_type_id;

        return $this;
    }

    /**
     * Method to set the value of field base_amount
     *
     * @param double $base_amount
     * @return $this
     */
    public function setBaseAmount($base_amount)
    {
        $this->base_amount = $base_amount;

        return $this;
    }

    /**
     * Method to set the value of field increment
     *
     * @param double $increment
     * @return $this
     */
    public function setIncrement($increment)
    {
        $this->increment = $increment;

        return $this;
    }

    /**
     * Returns the value of field id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Returns the value of field intl_weight_range_id
     *
     * @return integer
     */
    public function getWeightRangeId()
    {
        return $this->weight_range_id;
    }

    /**
     * Returns the value of field intl_zone_id
     *
     * @return integer
     */
    public function getZoneId()
    {
        return $this->zone_id;
    }

    /**
     * Returns the value of field parcel_type_id
     *
     * @return integer
     */
    public function getParcelTypeId()
    {
        return $this->parcel_type_id;
    }

    /**
     * Returns the value of field base_amount
     *
     * @return double
     */
    public function getBaseAmount()
    {
        return $this->base_amount;
    }

    /**
     * Returns the value of field increment
     *
     * @return double
     */
    public function getIncrement()
    {
        return $this->increment;
    }

    /**
     * Initialize method for model.
     */
    public function initialize()
    {
        $this->belongsTo('zone_id', 'IntlZone', 'id', array('alias' => 'IntlZone'));
        $this->belongsTo('weight_range_id', 'IntlWeightRange', 'id', array('alias' => 'IntlWeightRange'));
        $this->belongsTo('parcel_type_id', 'ParcelType', 'id', array('alias' => 'ParcelType'));
    }

    /**
     * Returns table name mapped in the model.
     *
     * @return string
     */
    public function getSource()
    {
        return 'intl_tariff';
    }

    /**
     * Allows to query a set of records that match the specified conditions
     *
     * @param mixed $parameters
     * @return IntlTariff[]
     */
    public static function find($parameters = null)
    {
        return parent::find($parameters);
    }

    /**
     * Allows to query the first record that match the specified conditions
     *
     * @param mixed $parameters
     * @return IntlTariff
     */
    public static function findFirst($parameters = null)
    {
        return parent::findFirst($parameters);
    }

    /**
     * Independent Column Mapping.
     * Keys are the real names in the table and the values their names in the application
     *
     * @return array
     */
    public function columnMap()
    {
        return array(
            'id' => 'id',
            'weight_range_id' => 'weight_range_id',
            'zone_id' => 'zone_id',
            'parcel_type_id' => 'parcel_type_id',
            'base_amount' => 'base_amount',
            'increment' => 'increment'
        );
    }

    /**
     * @param $offset
     * @param $count
     * @param $filter_by
     * @param $fetch_with
     * @param bool|false $paginate
     * @return array
     */
    public static function fetchAll($offset, $count, $filter_by, $fetch_with, $paginate = false){
        $builder = new \Phalcon\Mvc\Model\Query\Builder();
        $builder->addFrom('IntlTariff', 'Tariff');
        $columns = ['Tariff.*'];
        $bind = [];
        if ($paginate) {
            $builder = $builder->limit($count, $offset);
        }

        if(isset($fetch_with['with_parcel_type'])){
            $columns[] = 'ParcelType.*';
            $builder->innerJoin('ParcelType', 'ParcelType.id = Tariff.parcel_type_id', 'ParcelType');
        }
        if(isset($fetch_with['with_zone'])){
            $columns[] = 'Zone.*';
            $builder->innerJoin('IntlZone', 'Zone.id = Tariff.zone_id', 'Zone');
        }
        if(isset($fetch_with['with_weight_range'])){
            $columns[] = 'WeightRange.*';
            $builder->innerJoin('IntlWeightRange', 'WeightRange.id = Tariff.weight_range_id', 'WeightRange');
        }

        $builder->columns($columns);

        if($filter_by['tariff_id']){
            $builder->where('Tariff.id = :id:');
            $bind['id'] = $filter_by['tariff_id'];
        }

        if(isset($filter_by['zone_id'])){
            $builder->where("Tariff.zone_id = :zone_id:");
            $bind['zone_id'] = $filter_by['zone_id'];
        }

        $data = $builder->getQuery()->execute($bind);

        $zones = [];
        foreach ($data as $item) {
            $zone = $item->Tariff->toArray();
            if (isset($fetch_with['with_parcel_type'])) {
                $zone['parcel_type'] = $item->parcelType->toArray();
            }
            if(isset($fetch_with['with_zone'])){
                $zone['zone'] = $item->Zone->toArray();
            }
            if(isset($fetch_with['with_weight_range'])){
                $zone['weight_range'] = $item->WeightRange->toArray();
            }
            $zones[] = $zone;
        }
        return $zones;
    }

    public static function getCount($filter_by = array()){
        $obj = new BusinessManager();
        $builder = $obj->getModelsManager()->createBuilder()
            ->columns('COUNT(*) AS count')
            ->from('IntlTariff');

        //filters
        $where = [];
        $bind = [];

        if (!empty($filter_by['zone_id'])) {
            $where[] = 'IntlTariff.zone_id like %:zone_id:%';
            $bind['zone_id'] = $filter_by['zone_id'];
        }


        $builder->where(join(' AND ', $where));
        $data = $builder->getQuery()->execute($bind);

        if (count($data) == 0) {
            return null;
        }

        return intval($data[0]->count);
    }

}
